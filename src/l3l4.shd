











A single set of <addr, gw, mask> is supported per host.












                                                                     shacham
























                                                                     shacham
: arpget  Get an mbuf for arp packet.

: arpbuild  Build the common part of ARP packet: Always Ethernet and IP.






: arptab$  End of arp table.

: arpha  Locate a protocol address in ARP cache.
   TODO Faster cache access, i.e. hash?


: arpupdt  Update the hardware address on an existing <pa, ha> entry
   in ARP cache.
: >arptab  Add <pa, ha> entry to ARP cache in first unused location.
   TODO Faster access, i.e. hash?





                                                                     shacham
: arpreq  Build an ARP request.  Input protocol address is in host order.
: arpresp  Build an ARP response.  Again, convert input protocol address
   to network order.


: (arpbad)  Cleanup for bad ARP scenario.
: arpinput  Handle input ARP packet - Verify validity, even if optional per
   RFC 826.  Follow RFC 826 algorithm to the letter.











: arprslv  Locate an protocol address in arp table, and trigger arpreq
   if not found.



                                                                     shacham


: (60sec)  A crude calculation of 1 minute in cpu cycles.
: arptimer  arp timer
   Scan arp table every minute.  (*BSD scans every 5 min.)
   Send arpreq once watchdog is under 5 minute, trying to follow RFC-826
    simplistic approach. (*BSD has some more complicated retry mechanism.)





  Avoid time drifting by setting the next threshold per the current reading.



: delay  Wait u msecs with pause.
   TODO - Is waiting usec units, a la *BSD, needed?
   TODO - Generic service (?)





                                                                     shacham







: (bcstinit)  Derive broadcast address from <host ip address, netmask>


: in_cksum  Per Steven's book - incoming ip header checksum is 0, 16-bit calc.
  Assumptions - Input buffer is contiguous in memory.
  Note - 1's complement is " negate 1 - " but " not " seems identical.
  Note - 32-bit calculates FFFE, not FFFF as expected.

: in_broadcast  Look for INADDR_ANUCAST, INADDR_BROADCAST, or local broadcast.



: rtalloc  Trivial IP routing, based on a single set of <gateway, netmask>
   per host.



                                                                     shacham
: (ipbad)  Common handling of bad IP scenario.
: (ipid)  Maintain a global IP id, incremented by 1 per outgoing packet.
   TODO more secure id.
: ipbuild  Build an IP header.
   Note: Clear cksum field first, as TCP and UDP use the field.
   tos and flags (DF) tcp.
   Set ip>ip_off to "don't fragment"
   TODO ttl per session, incoming packet (?)

: ip_output   Add IP header and send via Ethernet.
   Assume mbuf has enough room for both IP and ethernet headers.

: ipinput  Handle incoming IP packets, v4 only.
   Save in_cksum cycles if NIC already checked validity of IP header.
   Multiplex packet to higher layer, one of ICPM, TCP, and UDP.









                                                                     shacham





: icmpxmt  Send ICMP packet over IP.
: icmpbuild  Very generic icmp buildup, mostly mbuf related.

: icmpreply  Build an ICMP reply from an input packet.





: icmpinput  Handle ECHO_REPLY.
   TODO other ICMP types?








                                                                     shacham
PINGS  Max simultaneous ping sessions. (Sure, could be more flexible
  by malloc-ing session cb and maintaining a linked-list, but why?)
PINGMAX  Max count.


: pings$  End of pings table.
: pinginit  Init a ping control-block, if available.




: pingdone  Clear leftovers once ping session is done.
: pingi>t   Locate i-th pingt.
: ping>cb   Locate ping control-block from an icmp packet.



: icmprpld  Handle a reply for our ping.

: pingsend  Send i-th ICMP echo packet.
   Use LS 16-bit of pingcb as icmp id, enabling multiple sessions between
    the same hosts.


                                                                     shacham
: ping  Ping a given destination.
        A trivial PING application with trivial user display.






















                                                                     shacham

struct ipovly   Usage of IP header.

struct udphdr   UDP header from RFC-768.

struct udpiphdr   UDP/IP header, with pointers.


















                                                                     shacham
: (udpbad)  Handle common bad UDP scenario.

: udpinput  Handle incoming UDP packets.
   For all packets, ip len (minus ip header) must equal udp header.
   Compute cksum per RFC 768, not per *BSD and Stevens, thus keeping
    the original ip header in place, while cksum-ing less 4 16-bit zeros.
   Save in_cksum cycles if NIC already checked validity of UDP packet.
   Note - when xl status indicates udp cksum validity, xlrx always marks
     both csum_flags and sets csum_data to $FFFF, thus a shortcut is fair.

   TODO For now, just verify cksum.
   TODO cksum-modified ipovly fields needed by user? ipovly ptrs used?












                                                                     shacham

struct tcphdr   TCP header, with no options, per RFC 793
struct tcpiphdr   IP/TCP header.

struct sockbuf   Uses plain buffer instead of mbuf chain.
 sb_tail is oldest un-ACK-ed data and new data is added starting at sb_head.
 Next segment to be sent starts at sb_next.

#MSS  Max Segment Size in an Ethernet packet.

TODO - What this _simple_ TCP implementation does not (nor should) do -
 1. Client side, aka out-going-session, with tcp_open, tcp_send_syn,
    the related state machine states, related timers, et al.
 2. Handle PSH, URG flags.
 3. OOB
 4. RTT for rexmit.
 5. persist timer (for 0 win).
 6. Store out-of-order segments. (Well, even RFC-793 calls that a MAY.)
 7. Use partial segments, i.e. where part is post rcv window.
 8. Check security and precedence.

TODO - What couldn't be tested due to lack of OS services (I think) -
 1. Spawn multiple background sessions.

                                                                     shacham
struct tcpcb   TCP control block:



  send sequence variables, per RFC 793.

  receive sequence variables, per RFC 793.
  additional variables: receive variables; congestion control.
  transmit timimg.

  out-of-band data.
  RFC 1323 variables.












                                                                     shacham
struct tcpstats   TCP stats, mostly per *BSD.























                                                                     shacham
  TH_ are TCP header flags.


  TCPS_ are TCP states.







TCP retransmission - TCP_MAXRXTSHIFT, TCPTV_REXMTMAX (64 sec)
TCP keepalive - TCP_KEEPIDLE RFC-793 says 2 hours, but start lower, for now.
   TCP_KEEPINTVL is 75 sec.
   TCP_MAXIDLE RFC-793 defines max 10 reties, but start lower, for now.

API_ are TCP control messages to user.


tcpcbs   Up to #TCPCB tcp sessions.
  TODO - more flexible storage, once a generic mechanism is available.



                                                                     shacham
: seq_lt  TCP sequence comparison, identical to timestamp (tstmp_X)
: seq_leq   and connection count (cc_X)
: seq_gt
: seq_geq

: >iss  Fetch ISS from rdtsc (bit 16-47).
   TODO - ~4 usec tick per machine.

















                                                                     shacham
: so_cc  Get current char count of socket buffer.
: so_empty  Set socket buffer to empty.


: so_next  Move sb_next by len to next char to send.
: so_rxmt  Set socket buffer for rexmit.

: so_add  Add data to socket buffer.





: so_ack  Remove acked data from socket buffer.




: so_data  Define address of send socket data next to be sent.
: so_left  Length of data not sent yet from send socket buffer.
: so_get  Fetch dlen chars from send socket buffer starting at sb_next.



                                                                     shacham
: (tcpdone)  Some common tcp exit work.

: tcpxmt  Send TCP packet over IP.
: tcpsnd  Adjust packet for IP, then send.

: tcpbuild   Prepare an mbuf for len size segment.

: tcpdlen   Calculate TCP data length, i.e. witout TCP/IP headers.


Build supported TCP otions -
: tcp_add_opt_noop
: tcp_add_opt_mss
: tcp_add_opt_ws
: tcp_add_opt_ts




: tcp_build_syn_opt  Add tcp options per Mac OS X telnet.
   TODO - add options per incoming SYN packet.



                                                                     shacham
: >sndmax  Set snd_max.


: >sndnxt  Set snd_nxt.

: tcpheader  Build a generic TCP header, i.e. fields the caller didn't set.
   Calculate TCP cksum, so no further content changes are due.

  TODO c+! is not available, but could be nice to have.















                                                                     shacham
: tcpctl  Build a generic TCP control packet and send.























                                                                     shacham

: tcp_send_syn_ack  Build, then send, SYN+ACK packet.






















                                                                     shacham
: tcp_send_ack  Build and send an ACK packet, with no data.




: tcp_send_fin  Build and send FIN+ACK packet.


: tcp_send_keepalive   Build and send a keepalive ACK packet.



: rst>ctl  Build fields in RST packet per incoming data packet.











                                                                     shacham
: tcp_send_rst  Build RST packet per rcf 793 (pp 65) -
   If ACK bit is off <SEQ=0><ACK=SEG.SEQ+SEG.LEN><CTL=RST,ACK>
   If ACK bit is on  <SEQ=SEQ.ACK><CTL=RST>

   Note - as the RST packet is built from an incoming packet, no ntoX is due.
   Note - as no active tcpcb is used, tcpheader isn't used.

   TODO - test with ACK bit off.
















                                                                     shacham

: >sndcnt  Handle snd_cnt for Dup ACK.

: tcpdbuild  Build an mbuf for dlen data length.

: tcp_send  Build and send a TCP data packet.


















                                                                     shacham
: keeprst  Restart keepalive timers.


: sndlen   Define data length of current to-be-sent segment.


: snd1seg  Build and send a single data segment.




: snd_left  Build and send all yet-to-be-sent data from send socket buffer.












                                                                     shacham
: tcp_rxmt
    TCPS_SYN_RECEIVED - rexmit SYN+ACK
    TCPS_ESTABLISHED - Rexmit all of send socket buffer data content.
    All other states - no-op.




















                                                                     shacham
: mss>maxseg  Define t_maxseg.

: optlen  Get TCP option length.
: tcp_get_opt  Parse a TCP option.
   Supported options are -
   0  end of option list
   1  noop
   2  mss
   3  scale
   8  ts


: tcp_opts  Parse TCP options from TCP header.











                                                                     shacham
: tcpcbget  Get a free slot for a tcpcb, if available, and allocate tcpcb.



: tcpcbfree  Free tcpcb and the slot pointing to that tcpcb.


: tcpsock>cb  Locate tcpcb for the socket (src addr and src port), if any.










: tcpsock>lsn  Locate a listening tcpcb for dst port, if any.





                                                                     shacham
: rxmt_treset  Reset retransmission timer et al.


: tcpt_rangeset  Adjust (increase) range of rexmit timer.


: more2ack?  Are there more data waiting to be ACKed?

: cur>txmt   Load rexmit timer with current value.

: rxmt_tset  Set rexmit timer, if needed.


: rxmt_tstart  Start rexmit timer, if needed.










                                                                     shacham
: badack?   Verify and handle received ack -
   (ack == snd_una) - no new ack, but packet is ok
   (ack > snd_una) and (ack <= snd_nxt) - rm acked data and move snd_una
   else - mark error, send ack for unsent data, and dump packet







: badsynack?   For SYN-ACK segments - verify SND.UNA <= SEG.ACK <= SND.NXT












                                                                     shacham
: rxmtinit  Prepare for rexmit by setting snd_nxt back to snd_una
   and moving back send socket buffer indicators.
: >maxcwnd  Keep high-water mark for Dup ACK count.
: dup>cwnd  Keep score of snd_cwnd.


: dupack?   look for repeated acks to trigger fast retransmit.
   Note - trigger rexmit of _all_ socket send buffer, but only upon
    receiving the 3rd duplicate ACK.  This policy differs from the code
    at Stevens/*BSD, where a segment is sent for each dup ACK up to snd_cwnd.
    Howevr, this _simple_ policy seems to work pretty well, considering
    the polling mechanism for incoming packets.
   Note - Actually, rexmit is done twice, for 3rd and 4th packet, as it worked
    better in some scenarios. (And didn't do any difference in others.)
   Note - slow start and congestion avoidance starts _after_ first packet
     loss, so will it help in telnetd scenario of multiple single char packets
     to avoid sending too many packets thus avoiding overwehlming the
     connection?  Plus. snd_cwnd is in bytes, not segments.
     The approach - NODELAY OFF for telnet.
   Note - seg following rexmit is marked "previous segment lost data"
    due to loss in the pipe (here, the NAT box seems like the cause)
    and _not_ due to loss by the NIC.


                                                                     shacham
: upsndwnd?  Verify received sequence for updating send window -
   (snd_wl1 < seq) or ((snd_wl1 == seq) and (snd_wl2 <- ack)) - update
   else - don't update



: upsndwnd   Update send window variable, if necessary -
    snd_wnd = th_win
    snd_wl1 = th_seq
    snd_wl2 = th_ack














                                                                     shacham
: badseq?  Expect next received packet to be contiguous to already received
   packets, for now.  In other words, for now, out of order packets are dumped,
   and expected to rearrive following the missing packet(s).  However,
   Fast Recovery is started by sending an undelayed ack, signaling a missing
   packet.

: (len?)  Verify received data falls within window.  For now, dump packets
   that ends after rcv_wnd. (Note - such event should be unlikely, as a stats
   counter is dedicated for that scenario.)





: len?  Verify received packets data length is within window.









                                                                         shacham

: tcp_input   Handle an incoming tcp packet -
    Verify checksum.
    Forward SYN-only packets to tcp_accept.
    All other packets are handled by TCP state machine.








: tcpclrt  Clear all timeout timers of a connection.



: >tcpidle  Set a connection (i.e. tcpcb) to CLOSED or LISTEN
   and remove all leftovers of currect connection, especially the socket.





                                                                     shacham
: tcp_state  TCP state machine
   Segments for unknown socket - discard segment with RST bit, else send RST.

  TCPS_CLOSED  Handled as a generic first step of state machine,
   i.e. TCPCB does not exist, thus no need for a separate case.

  TCPS_LISTEN  Step (1) (check for RST) and (2) (check for ACK) are handled
   as part of the case for unknown socket, i.e. TCPCB doesn't exist.
   Further steps are handled in tcp_accept.

  First, restart keepalive timeout













                                                                     shacham
  TCPS_SYN_SENT
   (1) Check for ACK bit
   (2) Process RST bit.
   (3) Check security and precedence TODO.
   (4) Check for SYN bit -
       If acceptable ACK - connection established.
       Else - other party sent SYN, so move to SYN-RECEIVED state.
   (5) If neither SYN or RST bits is set - drop segment.
















                                                                     shacham
 TCPS_SYN_RECEIVED  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al.
  (2) Process RST bit.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al.
      Note - no need to check for duplicate ACK.
      Move to ESTABLISHED state.
  (6) Check URG bit TODO.
      Note - No processing of segment text (RFC-793 doesn't mention seg text)
  (7) Process FIN bit.













                                                                     shacham
 TCPS_ESTABLISHED  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al.
  (2) Process RST bit.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al.
      Note - first look for duplicate ACK for fast recovery.
  (6) Check URG bit TODO.
  (7) Process segment text.
  (8) Process FIN bit.














                                                                     shacham
 TCPS_CLOSE_WAIT  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al, as for ESTABLISHED.
  (2) Process RST bit, as for ESTABLISHED
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST, and ESTABLISHED.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al.
      Note - first look for duplicate ACK for fast recovery.
  (6) URG bit - should not occur.
  (7) Process segment text - should not occur.
  (8) FIN bit - stay in CLOSE-WAIT state.
      TODO - should user be notified?













                                                                     shacham
 TCPS_FIN_WAIT_1  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al, same as ESTABLISHED.
  (2) Process RST bit, same as ESTABLISHED.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST, as ESTABLISHED.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al,
      again, as ESTABLISHED.
      If our FIN is now acknowledged then enter FIN-WAIT-2 and continue
      processing in that state.















                                                                     shacham
 TCPS_CLOSING  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al, same as ESTABLISHED.
  (2) Process RST bit - if set, enter the CLOSED state, and return.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST, as ESTABLISHED.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al,
      again, as ESTABLISHED.
      If our FIN is now acknowledged then enter TIME-WAIT,
      otherwise ignore the segment.
  (6) Ignore URG bit.
  (7) Ignore segment text.
  (8) FIN bit - remain in closing state, i.e. no-op.












                                                                     shacham
 TCPS_LAST_ACK  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al.
  (2) RST bit - enter CLOSED.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST.
  (5) Check for ACK bit - Our FIN is ACKED - enter CLOSED.
      Note - RFC-793 does NOT specify verification of ACK a-la ESTABLISHED.
  (6) URG bit - should not occur.
  (7) Segment text - should not occur.
  (8) FIN bit - RFC-793 says "stay in state" -- but if we should return
      when ACK bit is ON or OFF, how could this stage be reached?













                                                                     shacham
 TCPS_FIN_WAIT_2  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al, same as ESTABLISHED.
  (2) Process RST bit, same as ESTABLISHED.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST, as ESTABLISHED.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al,
      again, as ESTABLISHED.
      If rexmit is empty, the user's CLOSE can be acknowledged,
      but do not delete the tcpcb.
  (6) Check URG bit TODO.
  (7) Process segment text.
  (8) Process FIN bit - Enter the TIME-WAIT state.  Start the timer-wait
      timer, turn off the other timers TODO.











                                                                     shacham
 TCPS_TIME_WAIT  Follow RFC-793 segment processing steps -
  (1) Check SEG.SEQ and update RCV.NXT et al, same as ESTABLISHED.
  (2) Process RST bit - if set, enter the CLOSED state, and return.
  (3) Check security and precedence TODO.
  (4) Check for SYN bit. Note - same process as for RST, as ESTABLISHED.
  (5) Check for ACK bit, process SEG.ACK and update SND.UNA et al,
      again, as ESTABLISHED.
      If rexmit is empty, the user's CLOSE can be acknowledged,
      but do not delete the tcpcb.
  (6) URG bit - should not occur, ignore.
  (7) Segment text should not occur, ignore.
  (8) Process FIN bit - Remain in TIME-WAIT state.
      Restart the 2 MSL time wait timeout TODO.











                                                                     shacham
ip_ok  null terminated list of <ip_addr, netmask> pairs of acceptable
  incoming connections.
  Note - ip_addr in table is assumed to be already and-ed with netmask.



: ipfw?  A trivial firewall, looking for src-addr in ip_ok list.




: tcp_accept  Accept incoming connections.
  (3) Check for SYN
      We reach here only if only SYN bit is set in control.
      Handle security/compartment - TODO.
      Set RCV.NXT to SEG.SEQ+1 and IRS to SEG.SEQ.
      Select ISS and send SY-ACK segment <SEQ=ISS><ACK=RCV.NXT><CTL=SYN,ACK>
  (4) Other text or control
      TODO - not handled.





                                                                     shacham
: tcp_init  Allocate tcpcb, if available, for a new session.
   Init all fields.







: tcp_listen  Set a session to LISTEN.
   Note - Interactive connection like telnet should NOT set TCP_NODELAY,
     enabling accumulating of data before sending, thus reducing
     the number of packets of the wire and avoiding congestion.



: tcp_close  Close a connection.

: tcp_send_buf  Load buffer into send socket then send or trigger delayed send.



: tcp_done  Free a session.

                                                                     shacham
: (200m)   Trivial way to save few cycles every tick.
    With no d2/ assuming 200m fit in 32-bit cpu cycles seems fair.
: (500m)   Trivial way to save few cycles every tick.
    With no d2/ assuming 500m fit in 32-bit cpu cycles seems fair.
: (8m)   Trivial way to save few cycles every tick.

: delackclr  Reset (clear) delayed-ACK timer.
: delackset  Restart delayed-ACK timer, if not already running.

: delsndclr  Reset (clear) delayed-send timer.
: delackset  Restart delayed-send timer, if not already running.


: (tcp_drop)  Drop a TCP connection and inform user.










                                                                     shacham
: tcp_fasttimo
   The 200 msec timer.  Unlike the slow timer, the fast timer
    does not use 200m ticks but rdtsc counter. In order to wait 200ms,
    tick of 1 expires within 0-200 msec, thus on the average ack is delayed
    less than the requested 200m.
   Also, the delayed send timer, operating in a similar way to 200 msec timer.


















                                                                     shacham
: tcp_slowtimo
    Increment tcp_now, TCP timer that starts at system init.
    The 500 msec timer.  Scans all tcpcb for active timers,
      decrement and trigger rexmit and keepalive when counter is zero.




















                                                                     shacham
telnetd
 TODO as telnet is at layer 7, move to another file?
 TODO telnetd cb, for multiple sessions

struct tcmd  Telnet command from RFC-854





telnetd_msg  telnet init message - will suppress go ahead, will echo, \r\n



: telnetd_ctrl  Handle control events from TCP.









                                                                     shacham
: tcmd?  Have we found a command?
: tcmdid@  Get ID from telnet command.
: tcmdc@  Get command from telnet command.

: tcmdget  Fetch and decode telnet command.

: telnetd_rcv  Handle incoming telnet packets.
   Assumptions -
    telnet commands may arrive with data ( TODO test )
    IAC is not in data stream, as 7-bit US ASCII is used.
    Ignore \000 in data stream, as telnet-client sends cr as \r\000 but
     cli and vi need only \r
    No password mode, for now.

   Behavior -
    Only supported telnet options are - will suppress go ahead, will echo
    All other telnet commands by client are rejected.
    Our options (do suppress ga, will echo) are ignored in arriving packets.
    Each character is sent in a separate segment.
   Note - Don't m_freem the input mbuf, as TCP continue processing.

   TODO - send socket buffer overflow is ignored for control reply,
          as assumed to be exchanged in session start, when socket is empty.

                                                                     shacham

: telnetd-init  Init a telnetd session.


: telnetd_sendc  Send a single char over TCP.



















                                                                     shacham
: l3l4-init  Init stack variables.












: net-show  Show accumulated stats.
   Note - Use with struct definitions to read the results.









                                                                     shacham
 Note - adapation from vandys' COM port term.

# chars of input we buffer from telnetd
telnetd input buffer, and current count

: t_typing_deq Pull a char off the input FIFO
   Decrement count of buffered typing
   Shuffle down the queue of chars if there are any more
















                                                                     shacham
 Note:  Taken as-is from vandys' util/term
   TODO - Avoid said duplication.

: esc Emit an escape
: ansi_put_scr Bulk put of screen contents; not so friendly on an actual
 RS-232 TTY.  If we really cared, should do update optimization ala curses,
 but for now just paint the screen top to bottom.


: ansi_cons_op Common code for ANSI-driven terminals, factored out
 so that, for instance, Avram can hook to it from the telnetd code.
   Opcode 3: Clear screen, cancel standout, home cursor


   Opcode 4: cursor addressing









                                                                     shacham
: t_cons_op TTY operations for telnetd TTYs
   Opcode 2: Get char

   Opcode 1: Put char  send char over telnetd
             Pause for send failure due to send buffer overflow.

   Stuff handled by ANSI escape sequences
   Anything else--very bad
















                                                                     shacham

: >signal  A trivial way to stop a forground infinite loop.
: signal?  Was signal set by user?

: net-init  Init stack.
: (netrun)  The real work.
: netfg  A forground mode stack.
: netproc  Child process, forked by net-start.

: >'ttyops  From vandy's COM.
  TODO - Remove duplication.

: net-start  Called from screen 0.  fork ret value is passed to setrun,
   which recalls, thus invoking the child process.










