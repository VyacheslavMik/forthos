"




































































































: (clrUbpt) Clean user-initiated breakpoint




: (setUbpt) Set user-initiated breakpoint on the named word



: (setTraps) Update trap vectors based on whether we have breakpoints


: (syncBpt) Set active breakpoints to just those in the user breakpoint list






































Forward references from the local variable implementation; # of local
 variables supported, and high-level return catcher
: .frame Display a particular frame, returning next frame and RP pointer
   Fetch return addr, from this deduce the frame format
   For either case, dump the local variables themselves
   Also for either case, next up is pointer to next frame
   For return format checking, show caller and skip rest
: xwhere Show calling stack; this version is only compiled if we have
 local variables compiled into the system




: .srcs Walk up and down return stack, interpreting contents
   Fetch cell at this slot, display source and symbolic interpretation
   Get a key; < walks deeper into the stack, > walks back out
      We, of course, cap at top and bottom of stack
      Any other key leaves this mode
































: debug Set breakpoint on word
: undebug  ...clean breakpoint
: Undebug Clean all breakpoints



: (findBpt?) Only return flag for finding breakpoint, don't return an index


















Vector for tagging source, and actual data structure for mapping
# entries in srcMap

Record of a code location in the source
   Storage addr   Blk #         Offset to src in blk

: entry! Save current blk # and src offset into entry


















: update? See if this code addr is already recorded; just update it in
 place if so; optimize for common case of new code above highest
 previous addr



: growMap Grow size of srcMap, return pointer to new entry at end of it



: tagSrc Save current code location, blk#, and src offset.  No-op if not
 compiling from disk, update old entry in place if present.

: g+/g- Enable and disable recording of source information









                                                                     vandys

: (entry@) Fetch source code entry for this location




# cells backward to permit a match
: entry@ Fetch source code entry for this location, or one \"close
 enough\"















                                                                     vandys

# lines to show on each side of source line

: .lines Display nearLines # of lines, starting at the given line #.
 Inhibit action if the number is out of the range 0..BLKROWS-1



No { variables } at this stage of system boot, so plain old variables
: .srcLine Display the actual source line, with position highlighted
   Back up over terminating whitespace (if any)
   Walk back over letters of word, until whitespace or start of line
      Then display leading part of line
   Actual word for this location
   And trailing part of line









                                                                     vandys



: .src Display source and surrounding lines






















Code hook for arbitrary condition to break to debugger
: ('trap) Drop into debugger if we're in a selected debug trap range
   Also drop in if our code sniffer hook or'ed in a TRUE
 Note: unstructured jump to (debugger), to leave stack frame intact from caller
: ('atrap) Trap on about to throw from an abort\"
   Show abort string
   Show an input location if our input is from a block

   Jump into the debugger

\\ Point our trap vectors at these routines

: (trap) Branch over to trap handling if set in 'trap
: (genTrap) Compile a (trap) call


































"