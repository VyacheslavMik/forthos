                                                                     vandys

Maximum struct name length
Struct name being compiled (not reentrant)
Assembled name of current field
Running tally of offset into structure
: $strconv Convert pointer and count to counted string
: (struct_prefix!) Set structure name prefix
: struct Define a structure
: $strccat Append indicated number of chars onto a counted string
: (cat_name) Build name plus a character separator

: (build_name) Create struct element definition

: (struct_prolog) Build initial code for a structure word run-time
: (compile_struct) Build struct element, saving offset as its body
: (build_struct) use (compile_struct), run-time adds offset to pointer
: int8/16/32/cell Define 1, 2, 4, and cell- byte struct members



: bytes   Allocate space for a string
: endstruct Record structure size as <name>.size




(val_set) Flag manual overriding of enumeration numbering
: enum Define name of a enumeration
: (build_enum_name) Concatenate the current enum name and an underscore,
   then the current enumeration entry name.
: (compile_enum) Construct enum name, build dir entry, save current value
: (build_enum)   Build enum element, set action to fetch value
: enumval! Choose value for enum sequence
: enumval Register next member of the enumeration
: endenum Wrap up generation of enums, <enum>_MAX set to highest value
 if the default zero-based sequencing is used.






































                                                                     vandys








Record of latest routine we've initialized for; lets us know when we're
 starting compilation for a new routine by comparing with "last"
: ($cstreq?) A counted-string string comparison, returns whether the two
 strings are identical














Table mapping index to dictionary entries for locals
Build a maximum-length name to init our local entries
: >localNFA Convert index to NFA pointer

Calculate offset to (local) user variable in user structure
Macro to put address of user (local) in eax

code {@ Run-time for a local reference
   Body of var, get (local), add index for this var to (local) ptr
   Fetch var, push on operand stack, and continue

: cinc Increment a char location













Local variable names live here
This is nameless code to init our local entries:
                 Iterate each possible local name, create the entry
      Set its runtime to be the {@ assembly code above
      Record its NFA in our table
   Mint a unique name for each placeholder

Record the vocab pointer so we can use it for our search hook

: resetLocals Set all local name placeholders to just ^A, so they don't
 crowd a vocab listing (and yet continue to exist)

: findLocal 'localName? hook to search our private list of local
 variable names











When processing arg names, the current index assigned to an arg

Nameless cleanup code run at end of a definition (";")

: nfa! Store string into NFA of an existing entry

: localName! Store string into name for current arg entry
















                                                                     vandys

code {! Store an arg into its local variable slot
   Arg       Get (local) value
   Arg offset           Store arg




















                                                                     vandys

code end} Code returned into from a locals-using word.
   Drop local storage from return stack
   Pop previous (local) value from return stack, write to (local)
   Pop back to true caller of word which just returned, and continue
Create a threaded reference to end}, so [esi] can reach end}

code init{ Initialize locals storage in return stack frame
   Point to (local) user variable, get current value
   New stack frame
   Arrange return to our cleanup code
   Save old (local) in frame        (local) is this frame
   Skip argument count word (unused), continue











                                                                     vandys

Magic numbers for return signatures
String constant for abort message on bad return format
code end}-- Code returned into from a locals-using word w. return checking
   Calculate delta opstack size in cells, put in ECX

   Get packed signature of acceptable stack deltas into EDX
Extract next signature, compare to ECX, bail out successfully on match
   Look for sentinel, no more sigs if match, otherwise shr next sig
Failure: throw an abort, with ESI pointing at our entry (for stack trace)
Success: remove local variable storage
   Pop previous (local) value from return stack, write to (local)
   Pop back to true caller of word which just returned
   Remove frame from stack, and continue

Create a threaded reference to end}--, so [esi] can reach end}--








                                                                     vandys

code init{-- Initialize locals storage in return stack frame, record opstack
   Get argument count so we can save it for later return value checking
   Point to (local) user variable, get current value
   New stack frame
   Arrange return to our cleanup code
   Save argument count in frame
   Save stack pointer in frame
   Save pointer into routine, so if we abort we can see who it was
   Save old (local) in frame        (local) is this frame & continue














                                                                     vandys

code 2over "over" for double words


Pointer to entry code for currently compiling word

: #args Parse next stream of words until "}" or "|", return count
 and whether it ended on "}" (flagging end of value list)


: proc"--" Parse the ... part of { <args> -- ... }















: ({) Compile-time handling of locals.  Process variable names
 until -- or }, using recursion to make local handling match
 standard stack commenting order.


: { Start local variable definition; trigger some init on first set
 within a given word.  Push out a (genhook) for each *set* of words defined



: } Sanity check/catch bad brace matching

















code movjmp Move a block of code, then jump (presumably into it).
 Emulate being a Multiboot loader so our code will pull in the
 correct memory size.


: fastboot Load our own variant of Multiboot-headed code at "here",
 then atomically move it to its load point and jump into it.
   Verify that it looks like a Multiboot image

   Decode its fields, get ready to load it at "here"

   Iterate the blocks, copying them to "here"

   Create a Multiboot information structure






