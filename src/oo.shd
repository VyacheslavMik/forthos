

















































                                                                     vandys

Maximum number of distinct selectors
Magic number for a class data structure

Description of a given class
   Class of a class--this is actually Object>class, defined later
   Magic number tag for proper Class data structure
   Our superclass
   Linked list of classes sharing a common superclass
   Allocation size (includes size from superclass)
   Pointer to counted string for name of class
   Pointer to #sels array of vectors for all system selectors
   Pointer to first of subclasses (enumerated thereon via "sibs")

Calculate offsets needed by assembly code









                                                                     vandys


: $strcdup Take pointer & count, carve counted string out of heap,
 make it hold a copy of the indicated contents
: defClass: The "banging two rocks together" way we build the bootstrap
 classes

The intial set of classes; built manually to break circularity of definitions


; noMethod abort when invoked
The innermost array of method vectors; initially they all point to an
 abort.











                                                                     vandys

Each instance of an Object (i.e., any object in the system) will have
 an initial cell which points to the class of the object
Manually wire Object, instance of MetaObject, null superclass



: cloneMethods Make a copy of the provided methods table

: cloneRoot Clone the root methods table
Now wire up Class, instance of MetaClass, Object superclass



 ...wire up MetaObject, instance of Class, Class is also the superclass



 ...and finally, MetaClass, instance of Class, MetaObject is the superclass

MetaClass and MetaObject are on a sibling chain under Class





Most recently defined class

: ivars: Define some instance variables for the class.  We leverage
 the "struct" support in defining these fields.


: endivars All done with defining instance vars, record new size


















Maximum size of selector name (+1... it's a counted string)
# currently allocated selector names
Array of selector names
: selalloc Allocate a new selector

This internal API will be hidden after system build, thus we
 create an alias accessing it when building "oo" as debug on built system
: >sel Given string name of selector, return unique selector index















                                                                     vandys

Current class receiving a method, and the methods selector index
Definition vocab before starting a method definition
The "oo" vocabulary holds entries for all OO methods defined
Constructed name for an OO method; <class>:<method>
: class? Enforce class magic number

: def>name Create a definition name of <class>.<method> in defName
 Not used for invocation, but gives a name for the code for the debugger


: (:method) Compile a new method for the named class.  It has a constructed
 name in the "oo" vocabulary.  (This code gets attached to "-> :method")











                                                                     vandys

: setMethod If we inherited our method from the parent, update our
 notion of the code for that method, and then notify all our subclasses




: method; Finish defining a method.  Update our method table to point at
 this code using setMethod, which will also handle subclasses.  Leverage
 ";" to handle code postlog.


: trapSemi Catch closing a :method with a ; rather than method;
 We use defClass as our flag to indicate a :method is active












Make counted string available to assembly code
code (->) Runtime for compiled message invocation
   Get ob pointer from stack, get selector index, get class from ob
   Enforce sanity check on class pointer
             Get method table for class
   Index for given selector, and invoke method
Throw an error for an "object" who isn't formatted correctly

: -> Send a message to object pointer on top of stack.  Compiles code
 to do this if we're compiling?, otherwise just executes directly.  Yes,
 this is state sensitive, and no, I don't care about all the reasons I
 shouldn't do this.













code (super->) Runtime for super->.  During compile time we grabbed the
 superclass method table and indexed to the routine pointer.  All we do
 here is verify a proper object and then fetch the vector and jump.



: super-> Call routine in superclass context.  This is a compile-only
 operation which forces a call via our superclass method table.

















Vector to which type of allocation to use
Bucket and heap allocator hooks

Switch to heap memory or bucket allocator


:method new Basic primitive to create new storage.



:method class Fetch class for this instance
: initClass Initialize basic fields of a Class instance, inherit size
   Initialize magic #, record superclass
   Thread onto subclass list of superclass

   Clone method table









The chars "Meta" at a named storage location
: tagMeta Given a name string "FOO", return "MetaFOO" in allocated memory


Name of class & meta
 Superclass' meta, and generated metaclass
: mkMeta Create metaclass of the class "self"... parse name from input
   Mint Meta<name>               Parent (self) metaclass
   Create new MetaClass, initialize common fields
   Stamp name onto metaclass
: mkClass Now that any class variables are defined, instantiate meta -> class
   Instantiate class from metaclass, initialize common fields
   Fill in name, and make class known under this name in Forth
   Record this most recently defined class









                                                                     vandys

:method subclass: Simplest creation of a subclass, new class with no
 new class variables.
selfClass Superclass, so we can reference it in endcvars
:method subclassVars: Create new class with class variables.  We hook out
 to our instance variable support.


: endcvars At the end of the class variable definitions, we update the
 metaclass, then let the regular code instantiate the single instance
 of the metaclass (the class) and we're done.















Memory cleanup handler when using bucket memory
:method .class Display our class

Default print handler; just say what class the instance is

Abstract class for objects which hold objects
:method empty? Tell if there is contents
:method in? Tell if the given value is present

: (.) Default iterator, just show element in Collection
:method .elems Default display of elements; use -> do to iterate
:method . Default print; show class, then elements inside braces

:method first Return lowest indexed member in collection
:method last Return highest indexed member in collection








