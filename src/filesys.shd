

All filesystem words go in the "fs" vocabulary
Magic # for metadata         Name length for filename
Shape of metadata, which is located in the last 96 bytes of a 4k block
Block types: file, directory, and free blocks in each

: (magic) Tag metadata with magic # and flag block changed
: ((>meta)) Convert base pointer without sanity check
: (>meta) Convert base block pointer to metadata
   Verifies that metadata magic # is present
: (initfree) Zero whole block, sign with magic #

: (inithead) Initialize header of file or directory; records allocation
 of blocks to the object.

: (initbody) Initialize contents of file or directory

: mkfs New filesystem     Init 1st block as directory
   Init all blocks but initial directory one





                                                                     vandys
Shape of an entry in a directory block
# filename entries in a given dir block
: (cwd@) Return CWD, applying sanity check
: (cwd>) Return block containing CWD
: (cwd>meta) Metadata of CWD
: (block>meta) Convert block number to metadata pointer
: root Second cell of "cwd" user space is root of filesystem
: ($dirent) Return pointer to matching dirent in CWD, or 0
                    Check for end of valid entries
      Compare name
   Walk along to next directory entry
: ($lookup) Look up in dir by name

: cwd! Set block # for current working directory
   Sanity check
   Make root if first CWD set     ...and set CWD
: found? Abort if block # was 0 (not found)
: $cd Set CWD to subdir of current
: cd Interactive set CWD
: cd/ Set CWD to root of filesystem
: root! Set root along with CWD, with sanity checking



                                                                     vandys
: (slot) Find next open slot in directory


: (blkallot) Allocate some blocks from current directory


: ($mkent) Create new entry in current directory.  Its actual type
 and initialization is handled by the caller.




: (blankbod) Fill in body of file with initial contents
: (initfile) Initialize file contents

: $creat Create a new file

: creat Create a new file interactively








: (.type) Display type of entry




: entriesDo Iterate across all non-empty directory entries
      Access next slot in CWD
      When we reach a zeroed one, there are no more to display
      Invote our iterator

: .entry Display a single directory entry



: (.ls) Iterator for .ls, displays only directories and files



: .head Display the heading for a .ls output
: .ls Display all (non-deleted) entries
: ls Alias for .ls, so "fs.ls" works like you'd expect




: ($open) Open a file, enforcing the indicated type

: $open Open filename passed as counted string
: open Interactive file open
: open# Interactive open returning range of valid blocks


: load fs.load (as opposed to forth.load), load all blocks in
 a (presumably source) file














                                                                     vandys





: (initdir) Initialize meta information for directory block
: $mkdir Create directory from passed counted string (along with
 size)
: mkdir Interactive make directory

: (file>meta) Return metadata for block of file, verify that it *is*
 a file.












                                                                     vandys
: (initfilemeta) Initiliaze contents of metadata portion of file body

: (initfilebod) Set contents of a new block in the file's body
: (tagdelta) Mark blocks with new file type, FST_file_free if the file
 shrank, or FS_file if it grew.  New storage blocks get blanked, whereas
 entries on the freelist are zeroed.
: size! Set size of file   Sanity
   Calc new size, get file metadata
   Verify head of file (meta>here is 0 in body blocks of file)
   Verify room                                Save old, new "here"
   Set "here" to new end of file
   Now mark affected block range to their new value

: copy Copy only data contents, leaving metadata alone
: (copy-1st) Copy first block of file, preserving metadata

: copy-blocks Put a range of blocks into a file, setting the file
 length to reflect this as its contents.








: (file?) Tell if block is part of a file (body or unused extents)


: file>head Move from body of a file back to its first block
 TBD: should we just keep a back-pointer?



: file>tail Move from body of file to last valid block in it (i.e.,
 not an unallocated block at its end)
: (grow1) Grow file by one block







































: (movedown) Ripple down blocks, closing over the "blkpoint" block.


: (shrink1) Trime size of file by one block

: delblock Delete a block from a file





















: (type!) Assert current type, then change type to indicated one

: $rm "delete" entry named by string; set its filetype to "file deleted"
: rm Delete file named by next token
: $unrm "undelete" previously deleted entry
: unrm Interactive version
: (.lsrm) Iterator, displays only deleted entries


: lsrm List deleted entries


: rename Change file's name








