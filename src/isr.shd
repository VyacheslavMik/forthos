
We'll keep all of the x86 goop hidden inside OS
Selector priv value for kernel mode--we're always in kernel mode

Invalid type         Local descriptor   Task state segment
Interrupt            Traps                Memory R/O
Read/write mem        Code, readable
# of entries in IDT
First 32 are used for CPU exceptions
Following CPU ones are the 16 ISA interrupt sources
Task State Segment struct definition















Selector value for kernel privilege mode
Shape of memory-type segment entries



Shape of a gateway segment descriptor



Shape of memory argument to lgdt/lidt



Base ports of the two interrupt controllers
Ports on slave ICU, and level on master connected to slave

Layout of registers on entry to a trap








Number of clock interrupts per second

Programmable interval timer control ports
Command to configure count interval
Internal count rate of PIT
Calculate latch count for desired HZ configuration

# of entries in our GDT
: >sel Convert selector index into actual selector value in GDT
Selector values used


Our dummy TSS to keep the x86 happy.
Fill in fields of this dummy TSS.











: setseg Initialize a descriptor table slot with the given
 values.  Most values are defaulted (4k size, present, etc.)


Set up our GDT slots
4 gig read/write for kernel data
4 gig read/execute for kernel text
Our statically allocated TSS
The argument to l[gli]dt is a linear memory pointer argument
Fill in pointer to our GDT

Then stuff it into the hardware
Now load our task register via the GDT

                    Reset           Vectors served
   Chain to ICU1    8086 mode        Mask intrs for now
   ISR mode
   Reset           Slave vectors             We are slave
   8086 mode        No intrs here either   ISR mode here too
: init_pit Set interrupt rate by using our divided PIT rate by
   our selected HZ value.













: eoi Clear interrupt status on both ICU's














\                                                                    vandys
How to use multiprocessing edisms()... upper levels need to be converted
 to not poll things like key?.  To keep event check routines short, a
 standard sort of interface needs to be provided so the caller gets a
 pointer to a location whose value will change when the caller may need
 to wake up.

Console needs a "read count" field, clock needs a running count of seconds
 and microseconds, and so forth.  Eventually an async API into block(),
 but let's not worry about that yet.








































