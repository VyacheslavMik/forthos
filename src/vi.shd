
























                                                                     vandys

: beep   TBD: tie this to some sort of sound service?  Although it needs
 to be a TTY abstraction to support RS-232 types of devices.

: upc Convert lower case to upper case
: at at-xy from the Forth standard, but (of course) args reversed

edvar's are variables whose storage lies at "here" and beyond,
with indices allocated as an argument.  This permits multiple
instances of the editor, one per user task.



Number of words stored as per-process storage
This is the "user name" of the person editing.  It is flagged as
 empty, and gets filled in on initial editor invocation.
Vectors to our input modes; bound to routines as they are defined
chars per screen      lines per screen
columns per line






Some x-1 variants

ASCII escape char

Size of each pad area
 ...size allocated (includes slop)
: textBuf Text save area
: numBuf Numeric input area
: searchBuf Text of search command
: prevsearchBuf Text of last search command, for searching again
: blkBuf Private copy of disk buffer for current screen
   NOTE: blkBuf must be last, since it is not BUFsize bytes in size
: yankBuf Yank/put text hold buffer












: >line# Convert char position to line number
: line#> Convert line number to char position
: >bol Convert position to beginning of line
: >eol  ...to last char position on line
: curpos Get cursor position
: +cur Advance cusor position and check bounds

: mvcur Move cursor to current position

: bufadr Convert offset to byte pointer into buffer
: bufpos Return byte pointer in buffer of current edit position














: upd Set update flag
: ?prt Tell if char on TOS is printable
: mark If buffer hasn't changed, just return
  Tag modified block with our username in row 1
  Move our private buffer copy back to the block, clear change flag


: #tobol Return # chars to beginning of line
: #toeol Return # chars to end of line

: bufmv Move chars in disk buffer.  Convert from source and dest
 offsets to positions in buffer, then do a bulk move.  Flag buffer
 modified.











\                                                                    vandys
: position Move to special input partof screen, and blank input line
: empty? Tell if the indicated line # is empty

: clrLine Clear line starting at given position
: exp Insert blank line at current position, shifting all down one.
: shrink Delete line at position specified by TOS.
 Add blank line at bottom of screen.

















                                                                     vandys
: insertline Add line if there's room at bottom of screen

: deleteline Delete line at current position
: cempty? Tell if last char in line of position is a blank
: inschar Insert char at current position


: delchar Delete char at current position
: deltoeol Delete to end of line

: rarrow Cursor right
: larrow Cursor left
: uarrow Cursor up
: darrow Cursor down










                                                                     vandys
: heading Display a small header


: inserting? Tell if we are in insert input mode
: breakline Insert line at current position, shifting text after
 the cursor down to the new line.
: curline Return line # of current position
: onlast? Tell if we're on the last line of the screen
: ret Handle insertion of a CR.  If in insert mode, insert a whole
 blank line.  Otherwise just move down to the next line.



: quited Quit editor without saving screens.  Also resets stack.


: exitupd Save screens, then quit editor.

: (>prev) Save passed buffer to prevsearchBuf
: (<prev) Put prevsearchBuf onto passed buffer
: (padIn) Input a PAD buffer worth of typing; save new input.  If there
 is no input, use text from previous search.



: scanfail Factor out actions taken on scan failure, unstructured return
: scan+= ( c lim pos -- 0 | pos )  Scan forward for given char.
 Return a non-zero position, or 0 on failure.
: scan+<> Scan forward until not equal to given char.

: scan-= Scan backward for given char.

: scan-<> Scan backward for not equal to given char.


: mvlwrd Move left a word, returns # chars to move

: mvrwrd Like mvlwrd, but moving right.












: rword Move cursor right one word
: lword  ...left

: delchars Delete characters from current position

: dword Delete word at current position


: updscr Redisplay whole screen

: clrscn Clear whole screen













                                                                     vandys
: getid Input user ID
 Remembers it from the first time, and doesn't ask again.




: init2 Initialize data structures, but not block buffer portion
: init Initialize block buffer, then call init2 to set up rest of editor


: rstedit Restart edit of current block, discarding changes

: lstblk Move to block number one lower than our current one
: nxtblk Move to next block















: inShadow? Return whether we're currently editing the shadow screen
: edtshdw Move between source block and its shadow



















If we're building interactively, kTAP has been hidden by hide-sys
: (padTAP) Handle control chars within accept.  Escape aborts input,
 otherwise we use the existing control character handling.
: (dopadIn) Like (padIn), but don't consume argument
: padIn Read a line from the user into the given buffer.  Return whether
 or not input was successful--escaping out is detected.

: openDown Open a line beneath our current line
: openHere Open a line here, pushing current line down
















: 1st Go to first line
: middle Go to middle of screen
: lst Go to last line
: bol? Are we at beginning of line?

: hldln Copy current line into our hold buffer in pad1

: insln Insert line from pad1 if there's room (last line empty).



: rett Special CR never inserts a line

: begline Go to beginning of line
: endline Go to last char on this line

: startLine Go to first non-blank char on line








: status Display edit status






: joinLine Join chars from next line onto this one.
   Move the chars, delete from old line

   Snug remaining text against beginning of line
     Remove line if all text was pulled up
   Place cursor at point of joining












: backDchar Back up and delete char before cursor
: command Return to top-level command mode from insert mode


: insertoff Process a keystroke while in overwrite mode


: inserton Process keystroke while in insert mode



: dispatch Look through the command table and execute the matching
 entry.  Beep if no match is found.












: saveLines Massage argument (count # lines) against lines left on screen,
 save over the appropriate number of lines and return this count.


: cmd_deleteline Interactive line deletion, with save of text

d_cmd... Dispatch for delete commands

: cmd_Yank Yank some lines
: #insertlines Tell how many lines can be inserted at the current position


: cmd_Put Insert lines from yank buffer at current position



: cmd_put Insert lines at point below this line







                                                                     vandys
: searchingCur? Tell if we're searching on the current screen #
: curBufArg Provide pointer and count for searching in current screen
 edit buffer.
: bufArg Provide buffer pointer and count.  Use curBufArg for current
 buffer, else get block through block I/O and access all cps*2 bytes.
: scan Scan forward or backwards through buffer for target string,
 depending on search direction.
: adjustResult Adjust buffer pointer for the case of forward
 searching on current screen--index is in terms of curent position
: found? Drive a search of the current search buffer screen.















: searchInit Store parameters in preparation for a search

: scrJump Move to potentially new screen; do init if new screen
: jumpTo Jump to given position on given screen

: searchJump Jump to found position on search success
: search Search for string; move to location if string found.  Scan
 continues until a keystroke or the search succeeds.


: showScreen As we advance screen #'s, show the counter
: (fwd) Advance position in a forward search

: (back) Advance position in a backward search

: /fwd Search forward
: /back Search backwards







                                                                     vandys
: slash Do forward search of user-supplied string
: backslash Backward search

marks: Table of marked positions.  Both screen # as well as byte
marktick: Record of previous position when jumping to a mark
:setMark Record position.  Screen # in first word, byte position in
 second.  If on shadow, will have SCRSIZ added to it.
: >mark Convert character to a marker pointer.  If it's a bad
 character, beep and return 0.

: tick Get key, then jump to that mark.

: markPos Get key, then set mark to current location.











                                                                     vandys

: doDig Process a typed digit, accumulating a numeric argument
   Initial 0 means go to beginning of line, not numeric argument

   Accumulate argument value
   Tag that we have a valid argument
: isdigit? Tell if the given char is a numeric digit

: doGo Jump to a position.  No argument, jump to end of file.
 Otherwise it's a line number, thus jump to the given line on
 a given screen.



: deleteBlock Delete current screen, restart with new contents









                                                                     vandys
: fixTab Sweep through the current screen, converting tab chars
   into their equivalent spaces

: (delFromTop) Move up text at point to top of screen
   Block move from pos to EOS to top of screen (plus one line)
   Now erase from end of moved text to bottom of screen
: delFromTop Move up text from point, on both source screen
 and its shadow
: blankBottom  Blank text from point to end of screen on both source
 screen and its shadow
: insertBlock Insert new block in source, moving text from curpos
 to end of screen onto top of the new screen, and blanking this off
 of current screen

Z_cmd table for Z-<cmd> prefixes




: saveKey Dispatch all the Z-<cmd> prefix commands




                                                                     vandys
: overwriteMode Start overwriting characters at cursor
: insertMode Start inserting characters at cursor position

: openDown Insert line below this one, go into insertion mode

: openHere Insert line before this one, go into insertion mode

\ : changeKey Handle all cX sequences
: delKey Handle all dX sequences
: endWord Move to end of current word
: backWord Move back to previous word













                                                                     vandys
: (findCount) Return count of # char position we'll be looking at
: (findChar) Move to specified char, no-op on ESC
   &findchar is char we're searching, walk through buffer
      Move by increment/decrement in &findDir, end loop on match
         Simply set buffer position
          Forget buf pos and beep on failure to find char
: findChar Get char from user, then find it
: findAgain Find again, using last char searched
: appendMode Advance, then do insertion
: tillChar Move up until just before specified char















top_cmd: Top-level dispatch of "vi" type command chars.























                                                                     vandys
: keycmd Read key and dispatch at top level of editor commands

Arrange for "v" to enter editor from forth vocabulary

: v Invoke editor, optionally with scr # on stack
  Initialize state
  Edit at previously accessed block of no argument specified
  Startup message
  Get user ID and initialize editor on current block
  Main editor loop
    Clear accumulated numberic argument after command
    Update cursor position
    Execute whatever mode is selected, repaint on screen change











