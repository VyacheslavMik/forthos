







Values inherited from metacompiler environment

















Current display attribute, initially WHITE
A blank screen position value (data + attribute)

Current row/column
Flag hardware cursor needs to be updated
Count of unpaused scroll-ups which have happened
The queue of TTY input characters











































: set_screenmem Set base of screen memory, along with derived values


: gdc! Write a value to a GDC register
: cursor_pos Set HW cursor position based on current absolute screen offset
   Clear flag telling us that we needed to update the HW
   Calculate position on screen

   Pick it apart and send out to the I/O ports

: on_hw? Tell if we're currently addressing the hardware screen














: (scroll_up) Actual screen memory move/clear for scrolling up


: check_intr If there's an interrupt typed in & pending, throw
 an interrupt event.  (Inhibit if there's no handler.)
: scroll_up Scroll all lines up one
      Simple case, no need to pause, just roll the lines
   If there's already typeahead, inhibit scroll pause
   Put cursor at lower right-hand corner
           Multitask, re-placing cursor as needed
      Wait for keystroke on our screen, then roll the lines
   Move cursor to beginning on newly blanked bottom line
   Clear the count and typing, then check for interrupts

: consput Put character onto screen at current location
   Add current attribute to character
   Calculate screen location and store character








: (cons_fwd) Move cursor forward one position, scrolling if needed
   Wrapped to start of new line
   Check for line beyond bottom, leave if not
   Time to scroll up

: (cons_putc) Put displayable char, advancing cursor


: cons_putc Put character onto console
   If writing to HW screen, flag that physical cursor must move

   Display simple printing characters













   Tab



   Carriage return

   Newline
         Scroll at bottom of screen

















      Backspace        Back one space on current line
             Backspace to previous line























: blank_page Wipe indicated screen memory to blankness
: cons_page Blank current screen memory, home cursor


: cons_xy Set cursor position


: cons_attr Set display enhancement

: cons_blot Clear to end of line


: cons_putpage Set contents of entire screen in one go






























































State of key modifiers.  Note: no caps lock or alt.

: set_chan Change screen output to indicated channel
   No-op if already on this channel

   Save state of current channel



   Restore state from newly selected channel















: set_hw Change which screen is displayed on the physical display
   Range check

   Avoid no-op

   Only useful if multi-tasking

   Make the new HW display the current channel

   Move hardware screen image back into virtual storage,
    and switch to virtual storage for this screen














   New screen is now on the hardware... record this, and put its
    memory image onto the physical display


   Set parameters for display to TVRAM































































































: bad_cons_op Complain about bad console operations

: cons_q Put another char into queue, drop quietly if queue full

: cons_deq Pull char from queue

: cons_watcher Pull bytes from keyboard, queue for applications
      Interrupt becomes the only char in the typing queue
      Typing clears auto-pause for scrolling

: cons_getc Get char from user... if not on HW, no input available
   Update cursor if moved
   No typing queued, just return F
   Here's your char, checked for interrupt

: cons_op Operations as a TTY under ForthOS
        Give multi-tasking a chance when doing TTY input (cons_getc)
        Handle output to different screen

































: boot-cons Initialize console data structures
   Init order?  Just return our startup index

   Bind boot TTY driver to us
   Initialize cursor to blinking underscore
   Screen 0 is active and displayed on the hardware

   Task devoted to pulling keystrokes out, started on cold boot


   Walk screens to set each of them up













      First screen is the hardware one, others
       remain virtual until screen switch.
      Create an interpreter for each TTY channel
       (0th has the boot task)
         Child drops out to the interpretive loop

         Parent sets up TTY channel, then sets child runnable


















      Set row/col to bottom of screen
      Attribute                 Scroll count     Reserved word
      Blank screen image


   Initialize screen pointers, update cursor

   Initialize cursor position to bottom of screen

   Print screen # and "Ok" so we see something at bootup







































