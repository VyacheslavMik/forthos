
Maximum number of buckets
Smallest bucket size
 Maximum allocation size
Buckets, one word for allocation chain off each bucket size
Memory is carved from here, downward
: (bkallot) Carve some memory from our bucket heap
: empty-bks Empty out contents of buckets (if any)

: (>bk) Convert size to bucket pointer and size of that bucket

: bkalloc Allocate memory



: bkfree Free previously allocated memory










: (bk>size) Turn bucket pointer into its storage size

: bkrealloc Resize memory storage, possibly returning new location
      New size fits in old allocation
   Calculate how much of old to copy to new
   Move to new memory, free old memory, return new memory pointer
: bkzalloc Return memory initialized to zeroes


Notes on implementation: free memory is chained off the bucket
 pointer header under (bks).  The slot in (bks) points at the 2nd word
 of the memory block; the first word points at the bucket header, and
 the 2nd is a next pointer for the chain of free elements under this
 bucket.  What this means is that a memory element taken off the bucket
 is already set up with its state so it can be freed back to this
 bucket.








                                                                     vandys

: $bkdup Duplicate string into bucket memory

: $bkdup+ Like $bkdup, but allocate extra space




















                                                                     vandys


: boot-bk We can initialize later than any other boot utility, since
 none of them use us.  Our init action is to get the size of upper
 memory, calculate the top address, and use that as our heap, which
 is consumed downward.  We leverage empty-bks to init our actual
 data structures.

















