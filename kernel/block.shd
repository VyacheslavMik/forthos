"










































































































: (bk) Always hook out to multitasking first
   Add offset, quick return if newest block is the one we want

   Walk chain, end when we reach last element
      If found block with our data...
         Move to head of list, and return to caller of caller















: block
   Save old contents
   Get contents off disk
   Update block # for this buffer, return pointer to data



















: (buffer?) Return buffer, or 0


: copy Copy contents of one block to another
 NOTE: this copies over even the filesystem metadata, if any.  Thus, it
 will quite likely corrupt your filesystem if used imprudently.


: empty-buffers Clear all buffers



: save-buffers Flush out to disk all dirty buffers
: sync Alias for those of us with checkered pasts...

: flush Save all changes, then clear buffers


































Most recently list'ed block

: list List a block (source followed by shadow)
















































('endScr) Vector invoked at end of parsing of a screen
: (blktib) Point TIB into current block, or TTY buffer
: load Direct input from a block, arranging for proper nesting
   So we can see something happening
   Save old state
   Set prompt to \"quiet\", saving old prompt
   Point input to this block, save old on return stack, set TIB
   Iterate across input lines, re-accessing block when needed
      Start of next line, process, then advance
          Get saved state back from return stack
   Restore input state

: thru Load a range of blocks

: --> Chain to next block.  Note: consumes stack space, so extensive
 use is not recommended.









                                    Massage to walk block range
   Progress indicator
   Copy,       Advance to next block #,  drop counters at termination

: clear-blocks Initialize block contents (deprecated by filesystem)


: roundup Round up u1 to an increment of u2 (u2 is a power of two)
: (write_image) Write out an image starting at the given block number

Size of an a.out header
: unexec Copy running user area back to prototype, snapshot restart
   Prep call to (write_image), calculate image length in bytes
   Write image length (less a.out header) to a.out \"textlen\"
   Write end of memory to multiboot header
   Scale image size to 4k block count, write it out







"