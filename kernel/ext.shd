





























































































































: vocabulary Create a vocabulary
   Build vocabulary entry
   Link onto list of all vocabularies

: also Duplicate head of vocabulary list
: -also Pop head off vocabulary search list, but always keep two



: (.voc) Back up pointer, get vocabulary name, and print

: order Display order of vocabularies and current definition target




























































































































: 3dup Duplicate top three items on stack
: 3drop Drop top three items on stack

: (rollback) Roll number back out of position on stack.  Non-standard.
 Note: can't use do...loop's, as we are using the return stack.


: roll Insert item into position on stack





                                                                     vandys
: evaluate Load source from string
   Save old state
   Set prompt to quiet
   Point to input string
   Process this line
   Restore input state


fence--safety net for what can be forgotten


: (forget-entries) Walk a vocabulary name chain and delete entries
 which are at or above the forgotten entry.

: forget Forget the named word, and all above it. Handles forgetting
 a vocabulary, but not the case where the vocabulary is still in
 the search order (or the current definition vocabulary)

                 Restore "here" to start of this word's allocation






: s>d Convert single precision to double

Compare to 0


: d= Compare double numbers

: (dumpw) Dump cells instead of dump's byte orientation, in hex
   Dump in hex, iterate across count of words
      Next address, display it every 4
      Display contents, terminate after every 4
   Iterate... at end, put a trailing CR if needed, restore base
: dumpw User friendly; put a CR first






































 Pop arguments; esi gets popped into eax so we can save the
 old value






















code strpos Location of counted string at "a" is found in the buffer
at "ptr" whose length is "u" bytes.  An index from 0 to u, or -1.
Set up for search; keep old base pointer to generate found index.
  Also record ESI, as wel will be using this in the string instructions
Check count, leave if we're off the end of the buffer to search
Search for the target string at this position in the buffer



Loop iteration; advance buffer pointer and decrement buffer count

Search success, generate buffer index for successful search

Search failure, return -1

Restore ESI and return result.

: strpos We fix up the buffer count so the string length does not index
 beyond the end of the buffer






code strpos Location of counted string at "a" is found in the buffer
at "ptr" whose length is "u" bytes.  An index from 0 to u, or -1.
Set up for search; keep old base pointer to generate found index.
  Also record ESI, as wel will be using this in the string instructions
Check count, leave if we're off the end of the buffer to search
Search for the target string at this position in the buffer



Loop iteration; advance buffer pointer and decrement buffer count

Search success, generate buffer index for successful search

Search failure, return -1

Restore ESI and return result.

: strpos We fix up the buffer count so the string length does not index
 beyond the end of the buffer






: ($streq) $strcmp ain't available here (groan) and we don't need
 to know about lexical ordering, so here's a quick & dirty compare


: (unhook) Restore 'eval vector at completion of conditional compilation
: ($preproc) Implement conditional compilation constructs
      [if] Nest one level deeper (nest count in tmp2)
   [else] Start processing source normally if at level 1 (skipped
      [if] part due to false condition), otherwise just update count


: (prehook) Hook up our preprocessor 'eval vector, saving the old
 one for when we're done.
: [if] If true, just let text get eaten, otherwise start
 discarding text by invoking (prehook)
: [else] This would've been eaten if we were in [if] (prehook) mode,
 so here it means the [if] part was true and *now* we start (prehook).
: [then] No-op; [then]'s action is implemented by being recognized in
 ($preproc) above.
: [ifdef] Test for presence of ID; lets us skip having flag names
 sitting around some common cases






Double compare           d2 -> ebx/eax       d1 -> edx/ecx





















