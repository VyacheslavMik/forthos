                                                                     vandys
The sentinal pair at the end of the node actually gets used transiently
 during an insertion.  The way an insertion works is that the new
 key/value pair is always inserted into the node.  If the last, "sentinel"
 pair is then found to be used, the node is known to be "full", and it
 is split in two, with the new latter half being inserted up into the
 parent.


















                                                                     vandys


Number of entries stored per B-tree node
: (bn>parent) Point to parent pointer of a node
: (bnode) Allocate bnode, setting parent
: (bn>child) Point to the child pointer of a node
: (bn>pairs) Point to first of pairs under a node
: (bnleaf?) Tell if the given node is a leaf
: (bnroot?) Tell if node is root of btree
: btempty? Tell if node has no key/value pairs

: (bnindex) Return the key pointer for the key passed in
   Scan across pairs, looking for exact match
      Got it, return
   Advance... at end of loop, point beyond last key pointer

: btalloc Allocate top of an (empty) btree









: (key>leaf) Return the leaf node which would hold this key


: bt@ Look up key in btree, return value if present





















: (bnfull?) Tell if given node has all its key/value pairs filled


Pointer to key/val pair counter, if non-NULL
: (bninsert) Insert a key/value pair into the node





: (bnset) Insert a key/value pair; if the key is already present the
 value is simply updated, otherwise the pair is inserted.













: (reparent) Set parent of a node
: (bnreparent) Now that a set of entries has copied out from an old node,
 let each child node know about this new parent.




: (copy2ndleaf) Handle relatively easy case of the 2nd part of a node
 being split out when it's a leaf; nobody below needs to know about
 a new parent   : (copy2nd) otherwise does the copy and then arranges
 for reparenting.



: (clear2nd) Clear 2nd half of a node now that its contents has been
 copied to a new node.

: (bnhalve) Split a node in half, returning the 2nd half contents
 in a new node.  The key for this split point is also preserved.






: (bnclone) Create a new node, whose contents mirrors that of the
 passed original.

: (rootParents) Fixup parent pointers for nodes becoming
 children of root
: (bnAddRoot) 2nd part of root already split off, copy 1st part
 and reassemble with root pointing down to just the 1st and 2nd
 parts.
















: (bnsplit) Split a full node in half.  Special handling for root node,
 whose memory at that address must always remain at the top of the btree,
 thus we copy both halves out and make the root point down to the new
 pair of halves

: bt! Store value at given key in btree





: (btDo) Execute function across each leaf key/val pair

: btDo Recursively descend btree, invoke (btDo) on leaf nodes













































: (.leaf) Display contents of Btree leaf

: .bt Display btree














: btfree Free nodes of tree, depth first.  Passed node is NOT freed.



: btfree Free all sub-nodes, then this node itself

: btempty! Free all sub-nodes, then init this node to empty


















: (nextover) Given a node, find the next one over to a higher key value
   No parent, we're up out of the end of the whole tree
   Walk the value fields...
      When we find our lower node in the value field
         Pick up the next node over, or pop up and out of here

   Walk to next value field, pop up and out when we run out of keys


: (bt>sib) Move from one leaf node to its next upward kin
   Once we have next node over, drive down to first leaf node below
   Get first key from this leaf node

: btnextKey Given key, return next high and T, else F if none higher
   If have next highest key here, just return it
   Move to next leaf node over from us, return F if no more
   Return first key of this node








: (bn>lastkey) Return pointer to key of last key/value pair in node

: bttopKey Return highest key value in btree






















: bt>prev Given a node and its parent, return the one before this one
 in this parent, or 0

: bt>lastLeaf Given node, walk down to node with highest key under this
 part of the tree
: bt>-sib Walk from leaf to nearest leaf holding keys lower than ours




: backup Given node and key pointer, return node and key pointer for
 previous key.  This will either be two cells back on the same node (if
 there are key slots before the current one) or else a previous node with
 a pointer to the highest key in that node.  Returns 0 if there is no
 previous pointer










: btprevKey Given key, return next high and T, else F if none higher
   Get pointer to key position
   Back up to the key which is equal or less than current key
   If it's equal, back up before it
   Return that key



















The class; just a wrapper, except we also use this opportunity to keep
 a count of insertions to speed the size-of-btree query
Instance creation

Basic access


Display and enumeration

Free storage

Key traversal methods


:method size The count is bumped by 1 to reflect the special case of
 putting the initial key/value into an empty Btree
:method in? Tell if a given key is in the Btree
:method empty! Free up any sub-nodes, then init top to empty






