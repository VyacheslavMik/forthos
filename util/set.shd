"


























The Set class.
   List of members, storage size, and count of members currently stored
:method newsize Allocate new Set, sized with the provided amount of
 empty cells

:method new Create Set with default size

:method empty! Set contents of Set to be empty.  Does not resize storage.


:method free Release Set storage, then let superclass free actual instance
 variable memory.













: set>hash Given set and key, return starting index in Set for key
:method in? Tell if the given value exists in the Set








:method @ Fetch by indexing into underlying order of storage














: set! Store key into Set
:method swap Exchange Set contents with another Set





:method grow















                                                                     vandys

:full? Bump up count of elems in Set, grow its storage when it
 becomes full
:method add Add key to Set.




















                                                                     vandys

: fixups Walk successors of removed element, as their position may
 no longer be correct.  We null them out of their place in the Set,
 then re-insert them.




:method remove Remove a key from the Set















                                                                     vandys

:method do Invoke 'fn over each member of set




:method size Return count of # members in Set





























: test1 Fill Set with numbers, verify presence of numbers

: test2 Redundant add to Set, verify numbers again
: test3 Remove some members, verify Set follows











:method copy Duplicate contents of a Set into a new Set




: setephem Make all set storage ephemeral

















"