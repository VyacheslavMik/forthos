
Put this all in "drivers", even the utility parts
Base port for currently selected port
: com Set COM 1/2, adjusting to base port address
: defport Make it easy to access the various RS-232 ports by name,
 reflecting currently selected I/O port base

: baud! Calculate divisor values for high/low baud, set baud


: cominit Set baud, then set 8N1, then enable FIFO
: comput? Tell if there's room to put another char
: comput Put out another char (assumes you've checked comput?)
: comget? Tell if there's a char available
: comget Return next char (you've checked comget?, of course)
: term Terminal interactive loop, exits on ^Z input











# chars of input we buffer from the COM port
COM port input buffer, and current count

: com_typing_deq Pull a char off the input FIFO
   Decrement count of buffered typing
   Shuffle down the queue of chars if there are any more




















: esc Emit an escape
: ansi_put_scr Bulk put of screen contents; not so friendly on an actual
 RS-232 TTY.  If we really cared, should do update optimization ala curses,
 but for now just paint the screen top to bottom.


: ansi_cons_op Common code for ANSI-driven terminals, factored out
 so that, for instance, Avram can hook to it from the telnetd code.
   Opcode 3: Clear screen, cancel standout, home cursor


   Opcode 4: cursor addressing


   Opcode 5: clear to end of line ("blot")
   Opcode 6: set/clear "standout" display enhancement

   Opcode 8: Bulk put to screen





: com_watcher Thread which pulls typing from COM port and queues it
 for consumption via 'ttyops/getc


: com_cons_op TTY operations for COM port TTYs
      Opcode 2: Get char

   Opcode 1: Put char  wait for UART ready to accept
      Put the data out
   Stuff handled by ANSI escape sequences
   Anything else--very bad
















: >'ttyops Given user pointer, return pointer to 'ttyops field in it


: fork_com Launch thread serving CLI for COM port.  Also launch thread
 to wait for data on port and queueing it.

















